{
  "$schema": "https://developer.microsoft.com/json-schemas/fabric/item/report/definition/visualContainer/2.2.0/schema.json",
  "name": "42dae54378d2c0e50085",
  "position": {
    "x": 606.25650270529206,
    "y": 235.47169810739553,
    "z": 2000,
    "height": 394.9828338508255,
    "width": 531.12585317813125,
    "tabOrder": 2000
  },
  "visual": {
    "visualType": "deneb7E15AEF80B9E4D4F8E12924291ECE89A",
    "query": {
      "queryState": {
        "dataset": {
          "projections": [
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "numberFormatting"
                    }
                  },
                  "Property": "Index"
                }
              },
              "queryRef": "numberFormatting.Index",
              "nativeQueryRef": "Index1"
            },
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "numberFormatting"
                    }
                  },
                  "Property": "Value"
                }
              },
              "queryRef": "Sum(numberFormatting.Value)",
              "nativeQueryRef": "Value1"
            }
          ]
        }
      },
      "sortDefinition": {
        "sort": [
          {
            "field": {
              "Column": {
                "Expression": {
                  "SourceRef": {
                    "Entity": "numberFormatting"
                  }
                },
                "Property": "Index"
              }
            },
            "direction": "Ascending"
          }
        ],
        "isDefaultSort": true
      }
    },
    "objects": {
      "display": [
        {
          "properties": {}
        }
      ],
      "vega": [
        {
          "properties": {
            "provider": {
              "expr": {
                "Literal": {
                  "Value": "'vegaLite'"
                }
              }
            },
            "jsonSpec": {
              "expr": {
                "Literal": {
                  "Value": "'{\n  // define dataset source\n  \"data\": {\"name\": \"dataset\"},\n\n  // parameters storing predefined numeric pattern strings\n  // (these can be referenced for different magnitude levels)\n  \"params\": [\n    { \"name\": \"_quintillions\",  \"value\": \"#,0,,,,,,.#\" },\n    { \"name\": \"_quadrillions\",  \"value\": \"#,0,,,,,.#\"   },\n    { \"name\": \"_trillions\",     \"value\": \"#,0,,,,.#\"    },\n    { \"name\": \"_billions\",      \"value\": \"#,0,,,.#\"     },\n    { \"name\": \"_millions\",      \"value\": \"#,0,,.#\"      },\n    { \"name\": \"_thousands\",     \"value\": \"#,0,.#\"       }\n  ],\n\n  // transformation section: generate derived fields for formatted comparisons\n  \"transform\": [\n    {\n      // count digits in each value (minus one) → determines magnitude category\n      \"calculate\": \"length(toString(datum.Value))-1\",\n      \"as\": \"_zeros\"\n    },\n    {\n      // format raw value using a thousands separator (comma every 3 digits)\n      \"calculate\": \"format(datum.Value, '',.0f'')\",\n      \"as\": \"thousandSeparator\"\n    },\n    {\n      // assign a readable denomination label based on the digit count\n      \"calculate\": \"datum._zeros >= 18 ? ''quintillions'' : datum._zeros >= 15 ? ''quadrillions'' : datum._zeros >= 12 ? ''trillions'' : datum._zeros >= 9 ? ''billions'' : datum._zeros >= 6 ? ''millions'' : datum._zeros >= 3 ? ''thousands'' : ''hundreds''\",\n      \"as\": \"denominations\"\n    },\n    {\n      // Custom_Format_v1 → compact formatter using D3''s `format()` function\n      // applies suffixes for readability (K, M, B, T, etc.)\n      \"calculate\": \"datum.Value >= 1e18 ? format((datum.Value / 1e18),'',.1f'') + ''Q'' : datum.Value >= 1e16 ? format((datum.Value / 1e15), '',.1~f'') + ''q'' : datum.Value >= 1e12 ? format((datum.Value / 1e12), '',.1~f'') + ''T'' : datum.Value >= 1e9 ? format((datum.Value / 1e9), '',.1~f'') + ''B'' : datum.Value >= 1e6 ? format((datum.Value / 1e6), '',.1~f'') + ''M'' : datum.Value >= 1e3 ? format((datum.Value / 1e3), '',.1~f'') + ''K'' : format(datum.Value, '',.1~f'')\",\n      \"as\": \"Custom_Format_v1\"\n    },\n    {\n      // Custom_Format_v2 → alternate approach using manual rounding\n      // (e.g. 1234567 → 1.23M) with custom thresholds and precision control\n      \"calculate\": \"datum.Value >= 1e16 ? round((datum.Value / 1e18) * 100) / 100 + ''Q'' : datum.Value >= 1e13 ? round((datum.Value / 1e15) * 100) / 100 + ''q'' : datum.Value >= 5e10 ? round((datum.Value / 1e12) * 10) / 10 + ''T'' : datum.Value >= 1e8 ? round((datum.Value / 1e9) * 10) / 10 + ''B'' : datum.Value >= 1e5 ? round((datum.Value / 1e6) * 10) / 10 + ''M'' : datum.Value >= 1e2 ? round((datum.Value / 1e3) * 10) / 10 + ''K'' : round(datum.Value * 10) / 10\",\n      \"as\": \"Custom_Format_v2\"\n    }\n  ],\n\n  // shared encoding for row alignment (used across concatenated text charts)\n  \"encoding\": {\n    \"y\": {\n      \"field\": \"__row__\",\n      \"type\": \"ordinal\",\n      \"axis\": null\n    },\n    \"color\": {},\n    \"fill\": {}\n  },\n\n  \"spacing\": 30, // padding between columns in hconcat layout\n\n  // horizontally concatenate three text panels for comparison\n  \"hconcat\": [\n    {\n      // first panel: D3 built-in numeric formatting\n      \"width\": 50,\n      \"height\": 300,\n      \"title\": {\n        \"text\": [\"D3-Style\", \"Format\"],\n        \"fontSize\": 25\n      },\n      \"mark\": {\n        \"type\": \"text\",\n        \"fontSize\": 20,\n        \"align\": \"right\",\n        \"dx\": 10\n      },\n      \"encoding\": {\n        \"text\": {\n          \"field\": \"Value\",\n          \"type\": \"nominal\",\n          \"format\": \",.3~s\" // compact notation (e.g. 1.23M)\n        },\n        \"y\": {\n          \"field\": \"Index\", // aligns values vertically\n          \"type\": \"ordinal\",\n          \"axis\": null\n        }\n      }\n    },\n    {\n      // second panel: Custom_Format_v1 → format using dynamic D3 logic\n      \"width\": 50,\n      \"height\": 300,\n      \"title\": {\n        \"text\": [\"Deneb Format\", \"Custom 1\"],\n        \"fontSize\": 25\n      },\n      \"mark\": {\n        \"type\": \"text\",\n        \"fontSize\": 20,\n        \"align\": \"right\",\n        \"dx\": 10\n      },\n      \"encoding\": {\n        \"text\": {\n          \"field\": \"Custom_Format_v1\", // field created via calculate()\n          \"type\": \"nominal\"\n        },\n        \"y\": {\n          \"field\": \"Index\",\n          \"type\": \"ordinal\",\n          \"axis\": null\n        }\n      }\n    },\n    {\n      // third panel: Custom_Format_v2 → manual rounding + suffix logic\n      \"width\": 50,\n      \"height\": 300,\n      \"title\": {\n        \"text\": [\"Deneb Format\", \"Custom 2\"],\n        \"fontSize\": 25\n      },\n      \"mark\": {\n        \"type\": \"text\",\n        \"fontSize\": 20,\n        \"align\": \"right\",\n        \"dx\": 10\n      },\n      \"encoding\": {\n        \"text\": {\n          \"field\": \"Custom_Format_v2\",\n          \"type\": \"nominal\"\n        },\n        \"y\": {\n          \"field\": \"Index\",\n          \"type\": \"ordinal\",\n          \"axis\": null\n        }\n      }\n    }\n  ]\n}'"
                }
              }
            },
            "jsonConfig": {
              "expr": {
                "Literal": {
                  "Value": "'{\"view\": {\"stroke\": null}}'"
                }
              }
            },
            "isNewDialogOpen": {
              "expr": {
                "Literal": {
                  "Value": "false"
                }
              }
            },
            "enableTooltips": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "enableContextMenu": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "enableHighlight": {
              "expr": {
                "Literal": {
                  "Value": "false"
                }
              }
            },
            "enableSelection": {
              "expr": {
                "Literal": {
                  "Value": "false"
                }
              }
            },
            "selectionMaxDataPoints": {
              "expr": {
                "Literal": {
                  "Value": "50D"
                }
              }
            },
            "version": {
              "expr": {
                "Literal": {
                  "Value": "'6.4.1'"
                }
              }
            }
          }
        }
      ],
      "developer": [
        {
          "properties": {
            "version": {
              "expr": {
                "Literal": {
                  "Value": "'1.8.2.0'"
                }
              }
            }
          }
        }
      ],
      "stateManagement": [
        {
          "properties": {
            "viewportHeight": {
              "expr": {
                "Literal": {
                  "Value": "380.9828338508255D"
                }
              }
            },
            "viewportWidth": {
              "expr": {
                "Literal": {
                  "Value": "517.1258531781313D"
                }
              }
            }
          }
        }
      ]
    },
    "visualContainerObjects": {
      "visualHeader": [
        {
          "properties": {
            "background": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#FFF7CF'"
                    }
                  }
                }
              }
            },
            "border": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#a38600'"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "border": [
        {
          "properties": {
            "show": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "color": {
              "solid": {
                "color": {
                  "expr": {
                    "ThemeDataColor": {
                      "ColorId": 0,
                      "Percent": -0.2
                    }
                  }
                }
              }
            },
            "radius": {
              "expr": {
                "Literal": {
                  "Value": "5D"
                }
              }
            }
          }
        }
      ]
    },
    "drillFilterOtherVisuals": true
  }
}