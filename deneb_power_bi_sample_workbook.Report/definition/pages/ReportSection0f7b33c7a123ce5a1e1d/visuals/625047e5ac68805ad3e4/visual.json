{
  "$schema": "https://developer.microsoft.com/json-schemas/fabric/item/report/definition/visualContainer/2.2.0/schema.json",
  "name": "625047e5ac68805ad3e4",
  "position": {
    "x": 1184.9485015524765,
    "y": 235.30892229410878,
    "z": 3000,
    "height": 394.9828338508255,
    "width": 707.60754489871283,
    "tabOrder": 3000
  },
  "visual": {
    "visualType": "deneb7E15AEF80B9E4D4F8E12924291ECE89A",
    "query": {
      "queryState": {
        "dataset": {
          "projections": [
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "numberFormatting"
                    }
                  },
                  "Property": "Index"
                }
              },
              "queryRef": "numberFormatting.Index",
              "nativeQueryRef": "Index1"
            },
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "numberFormatting"
                    }
                  },
                  "Property": "Value"
                }
              },
              "queryRef": "numberFormatting.Value",
              "nativeQueryRef": "Value1"
            }
          ]
        }
      },
      "sortDefinition": {
        "sort": [
          {
            "field": {
              "Column": {
                "Expression": {
                  "SourceRef": {
                    "Entity": "numberFormatting"
                  }
                },
                "Property": "Index"
              }
            },
            "direction": "Ascending"
          }
        ],
        "isDefaultSort": true
      }
    },
    "objects": {
      "display": [
        {
          "properties": {}
        }
      ],
      "vega": [
        {
          "properties": {
            "provider": {
              "expr": {
                "Literal": {
                  "Value": "'vegaLite'"
                }
              }
            },
            "jsonSpec": {
              "expr": {
                "Literal": {
                  "Value": "'{\n  // dataset reference (bound to Deneb/Power BI data model)\n  \"data\": {\"name\": \"dataset\"},\n\n  // parameters defining pattern templates for Power BI custom number formats\n  // (these act as reusable string tokens in the transformation logic)\n  \"params\": [\n    { \"name\": \"_quintillions\",  \"value\": \"#,0,,,,,,.#\" },\n    { \"name\": \"_quadrillions\",  \"value\": \"#,0,,,,,.#\"   },\n    { \"name\": \"_trillions\",     \"value\": \"#,0,,,,.#\"    },\n    { \"name\": \"_billions\",      \"value\": \"#,0,,,.#\"     },\n    { \"name\": \"_millions\",      \"value\": \"#,0,,.#\"      },\n    { \"name\": \"_thousands\",     \"value\": \"#,0,.#\"       }\n  ],\n\n  // transformation logic: classification, scaling, and formatted variants\n  \"transform\": [\n    {\n      // derive number of digits (minus one) to identify numeric scale\n      \"calculate\": \"length(toString(datum.Value))-1\",\n      \"as\": \"_zeros\"\n    },\n    {\n      // format the value with thousands separator (base numeric formatting)\n      \"calculate\": \"format(datum.Value, '',.0f'')\",\n      \"as\": \"thousandSeparator\"\n    },\n    {\n      // determine magnitude category (used for labelling)\n      \"calculate\": \"datum._zeros >= 18 ? ''quintillions'' : datum._zeros >= 15 ? ''quadrillions'' : datum._zeros >= 12 ? ''trillions'' : datum._zeros >= 9 ? ''billions'' : datum._zeros >= 6 ? ''millions'' : datum._zeros >= 3 ? ''thousands'' : ''hundreds''\",\n      \"as\": \"denominations\"\n    },\n    {\n      // Custom_Format_v1: D3-based numeric abbreviation with thresholds\n      // uses suffixes (Q, q, T, B, M, K) and comma-grouped precision\n      \"calculate\": \"datum.Value >= 1e18 ? format((datum.Value / 1e18),'',.1f'') + ''Q'' : datum.Value >= 1e16 ? format((datum.Value / 1e15), '',.1~f'') + ''q'' : datum.Value >= 1e12 ? format((datum.Value / 1e12), '',.1~f'') + ''T'' : datum.Value >= 1e9 ? format((datum.Value / 1e9), '',.1~f'') + ''B'' : datum.Value >= 1e6 ? format((datum.Value / 1e6), '',.1~f'') + ''M'' : datum.Value >= 1e3 ? format((datum.Value / 1e3), '',.1~f'') + ''K'' : format(datum.Value, '',.1~f'')\",\n      \"as\": \"Custom_Format_v1\"\n    },\n    {\n      // Custom_Format_v2: slightly tighter thresholds; still D3-based\n      \"calculate\": \"datum.Value >= 1e17 ? format((datum.Value / 1e18),'',.1f'') + ''Q'' : datum.Value >= 1e14 ? format((datum.Value / 1e15), '',.1~f'') + ''q'' : datum.Value >= 1e11 ? format((datum.Value / 1e12), '',.1~f'') + ''T'' : datum.Value >= 5e8 ? format((datum.Value / 1e9), '',.1~f'') + ''B'' : datum.Value >= 5e5 ? format((datum.Value / 1e6), '',.1~f'') + ''M'' : datum.Value >= 5e3 ? format((datum.Value / 1e3), '',.1~f'') + ''K'' : format(datum.Value, '',.1~f'')\",\n      \"as\": \"Custom_Format_v2\"\n    },\n    {\n      // Custom_Format_v3: uses manual rounding instead of D3 formatting\n      // precision adjusted per threshold range\n      \"calculate\": \"datum.Value >= 1e17 ? round((datum.Value / 1e18) * 100) / 100 + ''Q'' : datum.Value >= 1e14 ? format(round((datum.Value / 1e15) * 100) / 100, '',.1~f'') + ''q'' : datum.Value >= 1e11 ? round((datum.Value / 1e12) * 10) / 10 + ''T'' : datum.Value >= 5e8 ? round((datum.Value / 1e9) * 10) / 10 + ''B'' : datum.Value >= 5e5 ? round((datum.Value / 1e6) * 10) / 10 + ''M'' : datum.Value >= 5e3 ? round((datum.Value / 1e3) * 10) / 10 + ''K'' : format(round(datum.Value * 10) / 10, '',.0f'')\",\n      \"as\": \"Custom_Format_v3\"\n    },\n    {\n      // Custom_Format_v4: similar to v3 but with more granular thresholds\n      \"calculate\": \"datum.Value >= 1e16 ? round((datum.Value / 1e18) * 100) / 100 + ''Q'' : datum.Value >= 1e13 ? round((datum.Value / 1e15) * 100) / 100 + ''q'' : datum.Value >= 5e10 ? round((datum.Value / 1e12) * 10) / 10 + ''T'' : datum.Value >= 1e8 ? round((datum.Value / 1e9) * 10) / 10 + ''B'' : datum.Value >= 1e5 ? round((datum.Value / 1e6) * 10) / 10 + ''M'' : datum.Value >= 1e2 ? round((datum.Value / 1e3) * 10) / 10 + ''K'' : round(datum.Value * 10) / 10\",\n      \"as\": \"Custom_Format_v4\"\n    },\n    {\n      // Custom_Format_v5: D3-style threshold formatting but with 5× thresholds\n      // (demonstrates relative magnitude cutoff tuning)\n      \"calculate\": \"datum.Value >= 5e17 ? format((datum.Value / 1e17),'',.1f'') + ''Q'' : datum.Value >= 5e14 ? format((datum.Value / 1e14), '',.1~f'') + ''q'' : datum.Value >= 5e11 ? format((datum.Value / 1e12), '',.1~f'') + ''T'' : datum.Value >= 1e8 ? format((datum.Value / 1e9), '',.1~f'') + ''B'' : datum.Value >= 1e5 ? format((datum.Value / 1e6), '',.1~f'') + ''M'' : datum.Value >= 5e3 ? format((datum.Value / 1e3), '',.1~f'') + ''K'' : format(datum.Value, '',.1~f'')\",\n      \"as\": \"Custom_Format_v5\"\n    },\n    {\n      // PBI_Formatting: true Power BI format pattern usage (pbiFormat())\n      // applies Power BI’s internal number formatting logic\n      \"calculate\": \"datum.Value >= 5e17 ? pbiFormat(datum.Value,_quintillions) + ''Q'' : datum.Value >= 5e14 ? pbiFormat(datum.Value,_quadrillions) + ''q'' : datum.Value >= 5e11 ? pbiFormat(datum.Value,_trillions) + ''T'' : datum.Value >= 5e8 ? pbiFormat(datum.Value,_billions) + ''B'' : datum.Value >= 5e5 ? pbiFormat(datum.Value,_millions) + ''M'' : datum.Value >= 1e3 ? pbiFormat(datum.Value,_thousands) + ''K'' : pbiFormat(datum.Value,''#,#'')\",\n      \"as\": \"PBI_Formatting\"\n    }\n  ],\n\n  // shared encoding for row positioning (aligns text rows across columns)\n  \"encoding\": {\n    \"y\": {\"field\": \"__row__\", \"type\": \"ordinal\", \"axis\": null},\n    \"color\": {},\n    \"fill\": {}\n  },\n\n  \"spacing\": 25, // spacing between hconcat columns\n\n  // horizontally concatenate comparison panels\n  \"hconcat\": [\n    {\n      // left column → shows denomination category (quintillions, billions, etc.)\n      \"width\": 50,\n      \"height\": 300,\n      \"title\": {\n        \"text\": [\"PBI Format\", \"Denominations\"],\n        \"fontSize\": 25\n      },\n      \"mark\": {\"type\": \"text\", \"fontSize\": 20, \"align\": \"center\"},\n      \"encoding\": {\n        \"text\": {\"field\": \"denominations\", \"type\": \"nominal\"},\n        \"y\": {\"field\": \"__row__\", \"type\": \"ordinal\", \"axis\": null}\n      }\n    },\n    {\n      // second column → PBI-style custom formatting using predefined patterns\n      \"width\": 50,\n      \"height\": 300,\n      \"title\": {\"text\": [\"PBI Format\", \"Custom 1\"], \"fontSize\": 25, \"align\": \"right\"},\n      \"mark\": {\"type\": \"text\", \"fontSize\": 20, \"align\": \"right\", \"dx\": 10},\n      \"encoding\": {\n        \"text\": {\n          \"field\": \"PBI_Formatting\",\n          \"formatType\": \"pbiFormat\", // indicates Power BI-specific formatting\n          \"type\": \"nominal\"\n        },\n        \"y\": {\"field\": \"Index\", \"type\": \"ordinal\", \"axis\": null}\n      }\n    },\n    {\n      // third column → Power BI style + fixed custom pattern\n      \"width\": 50,\n      \"height\": 300,\n      \"title\": {\"text\": [\"PBI Format\", \"Custom 2\"], \"fontSize\": 25},\n      \"mark\": {\"type\": \"text\", \"fontSize\": 20, \"align\": \"right\"},\n      \"encoding\": {\n        \"text\": {\n          \"field\": \"Custom_Format_v2\",\n          \"format\": \"#,0\",            // pattern format\n          \"formatType\": \"pbiFormat\",  // PBI format interpreter\n          \"type\": \"nominal\"\n        },\n        \"y\": {\"field\": \"__row__\", \"type\": \"ordinal\", \"axis\": null}\n      }\n    },\n    {\n      // final column → Power BI’s “auto unit” dynamic format\n      // automatically scales units (e.g., 1,000 → 1K)\n      \"width\": 50,\n      \"height\": 300,\n      \"title\": {\"text\": [\"PBI Format\", \"Auto Unit\"], \"fontSize\": 25},\n      \"mark\": {\"type\": \"text\", \"fontSize\": 20, \"align\": \"right\"},\n      \"encoding\": {\n        \"text\": {\n          \"field\": \"Value\",\n          \"type\": \"nominal\",\n          \"formatType\": \"pbiFormatAutoUnit\" // Power BI auto-scaling\n        },\n        \"y\": {\"field\": \"__row__\", \"type\": \"ordinal\", \"axis\": null}\n      }\n    }\n  ]\n}'"
                }
              }
            },
            "jsonConfig": {
              "expr": {
                "Literal": {
                  "Value": "'{\"view\": {\"stroke\": null}}'"
                }
              }
            },
            "isNewDialogOpen": {
              "expr": {
                "Literal": {
                  "Value": "false"
                }
              }
            },
            "enableTooltips": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "enableContextMenu": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "enableHighlight": {
              "expr": {
                "Literal": {
                  "Value": "false"
                }
              }
            },
            "enableSelection": {
              "expr": {
                "Literal": {
                  "Value": "false"
                }
              }
            },
            "selectionMaxDataPoints": {
              "expr": {
                "Literal": {
                  "Value": "50D"
                }
              }
            },
            "version": {
              "expr": {
                "Literal": {
                  "Value": "'6.4.1'"
                }
              }
            }
          }
        }
      ],
      "developer": [
        {
          "properties": {
            "version": {
              "expr": {
                "Literal": {
                  "Value": "'1.8.2.0'"
                }
              }
            }
          }
        }
      ],
      "stateManagement": [
        {
          "properties": {
            "viewportHeight": {
              "expr": {
                "Literal": {
                  "Value": "380.9828338508255D"
                }
              }
            },
            "viewportWidth": {
              "expr": {
                "Literal": {
                  "Value": "693.6075448987128D"
                }
              }
            }
          }
        }
      ]
    },
    "visualContainerObjects": {
      "visualHeader": [
        {
          "properties": {
            "background": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#FFF7CF'"
                    }
                  }
                }
              }
            },
            "border": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#a38600'"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "border": [
        {
          "properties": {
            "show": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "color": {
              "solid": {
                "color": {
                  "expr": {
                    "ThemeDataColor": {
                      "ColorId": 0,
                      "Percent": -0.2
                    }
                  }
                }
              }
            },
            "radius": {
              "expr": {
                "Literal": {
                  "Value": "5D"
                }
              }
            }
          }
        }
      ]
    },
    "drillFilterOtherVisuals": true
  }
}