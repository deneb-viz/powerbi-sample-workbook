{
  "$schema": "https://developer.microsoft.com/json-schemas/fabric/item/report/definition/visualContainer/2.2.0/schema.json",
  "name": "70318685d7164f6ffeb0",
  "position": {
    "x": 19.606375765949927,
    "y": 139.797391080498,
    "z": 12000,
    "height": 282.99012693935123,
    "width": 605.24682651622,
    "tabOrder": 1000
  },
  "visual": {
    "visualType": "deneb7E15AEF80B9E4D4F8E12924291ECE89A",
    "query": {
      "queryState": {
        "dataset": {
          "projections": [
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "stocks"
                    }
                  },
                  "Property": "date"
                }
              },
              "queryRef": "tbl_stocks.date",
              "nativeQueryRef": "date"
            },
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "stocks"
                    }
                  },
                  "Property": "symbol"
                }
              },
              "queryRef": "tbl_stocks.symbol",
              "nativeQueryRef": "symbol"
            },
            {
              "field": {
                "Aggregation": {
                  "Expression": {
                    "Column": {
                      "Expression": {
                        "SourceRef": {
                          "Entity": "stocks"
                        }
                      },
                      "Property": "price"
                    }
                  },
                  "Function": 0
                }
              },
              "queryRef": "Sum(tbl_stocks.price)",
              "nativeQueryRef": "price"
            }
          ]
        }
      },
      "sortDefinition": {
        "sort": [
          {
            "field": {
              "Column": {
                "Expression": {
                  "SourceRef": {
                    "Entity": "stocks"
                  }
                },
                "Property": "date"
              }
            },
            "direction": "Ascending"
          }
        ],
        "isDefaultSort": true
      }
    },
    "objects": {
      "display": [
        {
          "properties": {}
        }
      ],
      "vega": [
        {
          "properties": {
            "provider": {
              "expr": {
                "Literal": {
                  "Value": "'vegaLite'"
                }
              }
            },
            "jsonSpec": {
              "expr": {
                "Literal": {
                  "Value": "'{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n  \"description\": \"Multi-series line chart with labels and highest point markers.\",\n  \"data\": {\"name\": \"dataset\"},\n\n  // remove unwanted symbols before rendering\n  \"transform\": [\n    {\"filter\": \"datum.symbol!==''IBM'' && datum.symbol!==''GOOG''\"}\n  ],\n\n  // GLOBAL ENCODING (applies to all layers unless overridden)\n  \"encoding\": {\n    \"color\": {\n      \"field\": \"symbol\",\n      \"type\": \"nominal\", // categorical data (one color per symbol)\n      \"legend\": null // hides the legend display\n    }\n  },\n\n  // multiple visual layers defined below\n  \"layer\": [\n    {\n      // LAYER 1: main line series\n      \"mark\": {\n        \"type\": \"line\",\n        \"interpolate\": \"monotone\", // smooths the line curve between data points\n        \"tension\": 1 // controls how curved or tight the smoothing is\n      },\n      // LAYER ENCODING (defines axes for this line mark)\n      \"encoding\": {\n        \"x\": {\n          \"field\": \"date\",\n          \"type\": \"temporal\", // time-based field for the x-axis\n          \"title\": \"date\",\n          \"axis\": {\"grid\": true} // display grid lines along x-axis\n        },\n        \"y\": {\n          \"field\": \"price\",\n          \"type\": \"quantitative\", // numeric field for the y-axis\n          \"title\": \"price\",\n          \"scale\": {\n            \"domain\": [-100, 300] // manually set visible value range on y-axis\n          },\n          \"axis\": {\"grid\": true} // show horizontal grid lines\n        }\n      }\n    },\n\n    {\n      // LAYER 2: circle + label at the latest data point\n      // (this layer will compute one x/y position per symbol)\n      \"encoding\": {\n        \"x\": {\n          \"aggregate\": \"max\", // latest (maximum) date in the dataset\n          \"field\": \"date\",\n          \"type\": \"temporal\"\n        },\n        \"y\": {\n          \"aggregate\": {\"argmax\": \"date\"}, // value at that latest date\n          \"field\": \"price\",\n          \"type\": \"quantitative\"\n        }\n      },\n      \"layer\": [\n        {\n          // MARK 1: circle at last date\n          // inherits x/y from parent layer encoding\n          \"mark\": {\"type\": \"circle\"} // small dot to highlight last position\n        },\n        {\n          // MARK 2: text label beside the circle\n          \"mark\": {\n            \"type\": \"text\",\n            \"align\": \"left\", // align label text to left of its anchor\n            \"dx\": 6 // slight offset to avoid overlap with the circle\n          },\n          // MARK ENCODING (supplementary encoding)\n          // adds text channel on top of parent x/y\n          \"encoding\": {\n            \"text\": {\"field\": \"symbol\", \"type\": \"nominal\"} // show symbol name (AAPL, MSFT, etc.)\n          }\n        }\n      ]\n    },\n\n    {\n      // LAYER 3: mark and label the min/max points\n      \"transform\": [\n        {\n          // compute per-symbol min/max using window\n          \"window\": [\n            {\"op\": \"max\", \"field\": \"price\", \"as\": \"maxPrice\"},\n            {\"op\": \"min\", \"field\": \"price\", \"as\": \"minPrice\"}\n          ],\n          \"frame\": [null, null], // full-window computation (not moving)\n          \"groupby\": [\"symbol\"] // do these calculations separately per symbol\n        },\n        {\n          // keep only records equal to min or max\n          \"filter\": \"datum.price === datum.maxPrice || datum.price === datum.minPrice\"\n        }\n      ],\n\n      // shared x/y encoding for all sub-layer marks (parent encode)\n      \"encoding\": {\n        \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n        \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n      },\n\n      \"layer\": [\n        {\n          // MARK 1: triangle markers for highs/lows\n          // uses parent x/y\n          \"mark\": {\n            \"type\": \"point\",\n            \"stroke\": \"black\", // thin outline for clarity\n            \"strokeWidth\": 0.2,\n            \"shape\": {\n              // shape changes depending on whether it''s max or min\n              \"expr\": \"datum.price == datum.maxPrice ? ''triangle-down'' : ''triangle-up''\"\n            },\n            \"filled\": true, // fill inside shape with color\n            \"opacity\": 1, // full visibility\n            \"size\": 100, // size of the triangle symbol\n            \"yOffset\": {\n              // small vertical offset so triangle doesnâ€™t overlap the line\n              \"expr\": \"datum.price == datum.maxPrice ? -4 : 4\"\n            }\n          }\n        },\n        {\n          // MARK 2: outlined text label (white stroke for contrast)\n          // inherits parent x/y, adds text encoding\n          \"mark\": {\n            \"type\": \"text\",\n            \"opacity\": 0.65, // partially transparent for subtle look\n            \"fontWeight\": \"bolder\",\n            \"fontSize\": 12,\n            \"stroke\": \"White\", // white outline improves readability on dark backgrounds\n            \"strokeWidth\": 2.5,\n            \"align\": \"center\", // horizontally centered above the mark\n            \"baseline\": \"middle\", // vertically centered alignment\n            \"dx\": 0,\n            \"dy\": {\"expr\": \"datum.price == datum.maxPrice ? -15 : 15\"} // offset label up or down\n          },\n          // MARK ENCODING (supplementary encoding)\n          \"encoding\": {\n            \"text\": {\n              \"field\": \"price\",\n              \"type\": \"quantitative\",\n              \"format\": \".1~f\" // format numeric text (1 decimal, no trailing zeros)\n            },\n            \"color\": {\"value\": \"black\"} // solid black text fill\n          }\n        },\n        {\n          // MARK 3: solid text overlay for better legibility\n          // inherits x/y, repeats text channel\n          \"mark\": {\n            \"type\": \"text\",\n            \"fontWeight\": \"bolder\",\n            \"fontSize\": 12,\n            \"align\": \"center\",\n            \"baseline\": \"middle\",\n            \"dx\": 0,\n            \"dy\": {\"expr\": \"datum.price == datum.maxPrice ? -15 : 15\"}\n          },\n          \"encoding\": {\n            \"text\": {\n              \"field\": \"price\",\n              \"type\": \"quantitative\",\n              \"format\": \".1~f\" // same number formatting for consistency\n            },\n            \"color\": {\"value\": \"black\"}\n          }\n        }\n      ]\n    }\n  ]\n}'"
                }
              }
            },
            "jsonConfig": {
              "expr": {
                "Literal": {
                  "Value": "'{\r\n  \"view\": {\r\n    \"stroke\": null\r\n  },\r\n  \"axis\": {\r\n    \"grid\": false\r\n  }\r\n}'"
                }
              }
            },
            "isNewDialogOpen": {
              "expr": {
                "Literal": {
                  "Value": "false"
                }
              }
            },
            "enableTooltips": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "enableContextMenu": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "enableHighlight": {
              "expr": {
                "Literal": {
                  "Value": "false"
                }
              }
            },
            "enableSelection": {
              "expr": {
                "Literal": {
                  "Value": "false"
                }
              }
            },
            "selectionMaxDataPoints": {
              "expr": {
                "Literal": {
                  "Value": "50D"
                }
              }
            },
            "version": {
              "expr": {
                "Literal": {
                  "Value": "'6.1.0'"
                }
              }
            }
          }
        }
      ],
      "developer": [
        {
          "properties": {
            "version": {
              "expr": {
                "Literal": {
                  "Value": "'1.8.1.0'"
                }
              }
            }
          }
        }
      ],
      "stateManagement": [
        {
          "properties": {
            "viewportHeight": {
              "expr": {
                "Literal": {
                  "Value": "248.99012693935123D"
                }
              }
            },
            "viewportWidth": {
              "expr": {
                "Literal": {
                  "Value": "591.24682651622D"
                }
              }
            }
          }
        }
      ]
    },
    "visualContainerObjects": {
      "border": [
        {
          "properties": {
            "show": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "color": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#B3B3B3'"
                    }
                  }
                }
              }
            },
            "radius": {
              "expr": {
                "Literal": {
                  "Value": "6D"
                }
              }
            }
          }
        }
      ],
      "title": [
        {
          "properties": {
            "show": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "fontSize": {
              "expr": {
                "Literal": {
                  "Value": "11D"
                }
              }
            },
            "text": {
              "expr": {
                "Literal": {
                  "Value": "'Line chart with highest/lowest markers'"
                }
              }
            }
          }
        }
      ],
      "visualHeader": [
        {
          "properties": {
            "background": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#FFF7CF'"
                    }
                  }
                }
              }
            },
            "border": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#a38600'"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "drillFilterOtherVisuals": true
  }
}